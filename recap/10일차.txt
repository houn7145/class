인터페이스
- 작업명세서, 실제로 구현된 것이 전혀 없는 기본 설계도
객체를 생성할 수 있고 클래스 작성에 도움을 줄 목적으로 사용되며
미리 정해진 규칙에 맞게 구현하도록 표준을 제시하는 데 사용됨
추상메소드와 상수만을 멤버로 가짐
-다형성을 가능하게 함

인터페이스의 문법

public interface 인터페이스이름 {
	public static final 타입 상수이름 = 값;
	public abstract 메서드 이름(매개변수 목록);  // 구현된 메소드는 가질 수 없음
}

- 'class'대신 'interface' 예약어를 사용한다는 점에서 클래스와 유사함
모든 멤버변수는 public static final이어야 하며 static final은 생략할 수 있고
모든 메서드는 public abstract 이어야 하며 abstract를 생략할 수 있음
private는 사용 불가  - 상수나 메소드를 만들 때 private 접근 제한자는 불가

다형성
- 여러 가지 형태를 가질 수 있는 능력
말 그대로 객체가 다양하게 변할 수 있음
하나의 인터페이스를 사용하여 다양한 구현 방법을 제공 
하나의 클래스나 함수가 다양하게 동작하는 것
ex) 오버로딩(overloading) : 같은 클래스 내에서만 오버로딩이라 할 수 있다.
메소드 다중정의 (같은 class에서 동일한 메소드가 매개변수를 달리 여러 개 존재
     오버라이딩(overriding) : 같은 이름을 가진 메소드를 다른 클래스에서 재정의 하는 법
소드 재정의 : 부모클래스와 자식클래스에 동일한 method 존재(틀만 가져와 재정의)

인터페이스와 다중상속
- java는 다중상속 불가능
다만 java에서도 interface를 통해서는 다중구현이 가능하여, 여러 가지 타입으로 객체를 선언할 수 있음
 ‘extends’ 대신 ‘implements’를 사용

단일상속(O)
public class ChildClass extends ParentClass1 {

} 
다중상속(X)
public class ChildClass extends ParentClass1, ParentClass2, ParentClass3 {

}
다중구현(O)
public class ChildClass implements IFunction1, IFunction2, IFunction3 {

}



