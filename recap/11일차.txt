패턴
- 객체지향 언어의 장점들을 모아 가장 효율적으로 개발을 할 수 있게 만들어 놓은 프레임

싱클톤 패턴 - 싱글톤 패턴(Singleton pattern)이란 어떤 클래스의 객체를 오직 하나인 유일한 객체로 만들어 
여러가지 상황에서 동일한 객체에 접근하기 위해 만들어진 패턴
싱글턴 패턴을 이용하면, 클래스 하나에 객체를 유일하게 하나만 생성하여 모든 곳에서 하나의 객체에만 접근가능

public class SingletonClass {
	private static SingletonClass SINGLETON_INSTANCE;
	private int i;
	private SingletonClass(){i = 10;}	//생성자함수가 private이므로 외부에서는 new를 이용해서 
// 생성못하고 이 클래스 내부에서만 생성자함수 호출할 수 있음
	public static SingletonClass getSingletonClass(){
		// 객체가 생성되기 전에 데이터영역의 클래스 상태에서 바로 접근가능한 메소드
		if(SINGLETON_INSTANCE==null)
			SINGLETON_INSTANCE = new SingletonClass();//객체생성을 이곳에서만 가능
		return SINGLETON_INSTANCE;
	}
	public int getI() {return i;}
	public void setI(int i) {this.i = i;}

스트레티지 패턴 - 스트레티지 패턴(Strategy Pattern)이란 기능 하나를 정의하고 각각을 캡슐화하여 교환해서 사용할 수 있도록 만듦
스트래티지를 활용하면 기능(알고리즘)을 사용하는 클라이언트와는 독립적으로 기능(알고리즘)을 변경가능