Map 계열 Collection 클래스
- Map계열의 자료구조는 인덱스 대신 키 값으로 데이터를 액세스함
st계열과 달리 인덱스가 없고 키와 값만 있음. 그리고 키값은 유일해야하며 중복이 불가능함

hashMap 문법
ex) HashMap<Integer, String> hashmap = new HashMap<Integer, String>();
hashMap.put(1, "str1"); // 데이터는 중복이 가능하나 key는 중복되면 안됨
hashMap.remove(1); // remove할 때는 key값으로만 가능
hashMap.clear(); // 모든 데이터 제거

hashMap 출력
Iterator<Integer> iterator = hashMap.keySet().iterator(); // 반복자
while(iterator.hasNext()) {
	Integer key = iterator.next();
	System.out.println(key + "의 데이터는" + hashMap.get(key));


Set 계열 Collection 클래스 
- Set계열 자료구조에서는 인덱스가 존재하지 않고 중복된 데이터는 허락하지 않음
중복된 데이터의 의미는 hashcode()값이 같거나 equal()메소드의 결과값에 의해 해석

HashSet 문법
ex) HashSet<String> hashset = new HashSet<String>();
hashset.add("str0");

HashSet 출력
Iterator<String> iterator = hashset.iterator();
while (iterator.hasNext()) {
	System.out.println(iterator.next());


반복자 
- 데이터를 반복적으로 검색하는데 아주 유용한 인터페이스

반복자 문법 
Iterator<데이터타입> iterator명 = 컬렉션.iterator();


자바 입출력 i/o
- 입력(Input)과 출력(Output)을 뜻 함
프로그램에게 입력하는 것은 Input이며 프로그램에서 어떤 것을 출력하는 것을 Output이라고 함

Java에서의 파일입출력 API

InputStream : 1byte단위 입력 API, 이미지, 동영상 등의 데이터에 주로 사용
OutputStream : 1byte단위 출력 API, 이미지, 동영상 등의 데이터에 주로 사용
Reader : 2byte단위 입력 API, 문자열에 주로 사용
Writer : 2byte단위 출력 API, 문자열에 주로 사용






