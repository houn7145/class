Java Thread

- Thread(멀티 Thread)란 하나의 프로그램이 동시에 여러 개의 일을 수행할 수 있도록 해 주는 것
JAVA는 기본적으로 멀티Thread를 지원하기 위해 java.lang.Thread 클래스를 제공
Thread는 두 가지 형태로 존재 - N개의 스레드가 객체 하나를 공유하는 방식과 N개의 스레드가 각각 객체 N개를 사용하는 방식 

멀티 Thread의 장점
자원을 보다 효율적으로 사용할 수 있음
사용자에 대한 응답성이 향상됨
작업이 분리되어 코드가 간결해짐

멀티 Thread의 단점
동기화(synchronization)에 주의해야 함
교착상태(dead-lock)가 발생하지 않도록 주의해야 함
각 Thread가 효율적으로 고르게 실행될 수 있게 해야 함

Thread 문법
- Runnable 인터페이스 구현(implements)을 통한 Target과 Thread
- Thread 클래스 상속(extends)을 통한 Thread

Synchronized
- 먼저 수행되는 Thread의 모든 작업이 끝날 때까지 다른 Thread는 기다리도록 하는 예약어
객체에 선언되어 있는 인스턴스 변수를 Thread 인스턴스의 값에 영향을 미치게 됨
이런 경우를 대비해서 JAVA에서는 synchronized라는 키워드를 이용(public synchronized void)


데이터베이스

- 데이터란 현실세계에서 관찰이나 측정을 통해 수집된 사실(fact)이나 값(value)
정보란 데이터의 유효한 해석이나 데이터 상호간의 관계를 의사결정에 도움이 되도록 가공한 것(이것은 데이터의 부가기치를 높임)
데이터베이스란 여러 응용 시스템들이 공유할 수 있도록 통합, 저장된 운영데이터의 저장소
운영상 필요한 데이터를 중복을 최소화하여 컴퓨터 기억 장치 내에 모아 놓은 데이터 집합을 뜻함

데이터 베이스 관리시스템의 기능

정의 기능 (Definition) - 데이터의 형태, 구조, 데이터베이스의 저장에 관한 내용을 정의 / 물리적/논리적 구조 명세
조작기능 - 사용자의 요구에 따라 검색, 갱신, 삽입, 삭제 등을 지원하는 기능 / 사용자와 데이터베이스 사이의 인터페이스를 위한 수단 제공
제어 기능 (Control) - 데이터베이스의 내용에 대해 정확성과 안전성을 유지하는 기능(무결성 유지, 보안, 복구, 병행 수행 제어)

데이터베이스의 특성(DB를 사용해야 하는 이유)

Realtime accessibilities(실시간처리) - 생성된 데이터를 즉시 컴퓨터로 보내 처리하는 방식 / 질의에 대한 실시간 처리 및 응답(원할 때마다 쓰고 읽음)
Continuous Evolution(계속 변화) - 새로운 데이터의 insert, delete, update 등의 기능이 수시로 이루어짐
Concurrent Sharing(공유) - 여러 사용자가 자기가 원하는 데이터에 동시에 접근하여 사용가능
Content Reference(내용에 의한 참조) - 데이터 레코드들의 주소나 위치가 아니라 사용자가 요구하는 내용(데이터가 가지고 있는 값에 따라 참조됨)

데이터베이스 관리 시스템의 장점
 
데이터 중복의 최소화 - 데이터를 통합하여 관리하므로 데이터의 중복 제어 가능
데이터 공유 - 데이터의 통합 관리를 위해 데이터를 공통으로 사용할 수 있도록 데이터를 공통의 저장소에 저장하고 이를 이용하여 데이터를 사용하도록 함
데이터의 무결성, 일관성 유지  - 데이터가 중복을 제거하고 데이터의 공유함으로써 데이터간의 불일치가 발생하지 않도록 하여 데이터 관리의 일관성 유지
데이터베이스에 저장된 데이터 값과 실제 값이 일치하도록 함으로써 무결성 유지
데이터의 보안 보장 - 데이터베이스를 중앙집중식으로 관리하기 하기 때문에 데이터베이스의 관리 및 접근을 효율적으로 관리함으로 모든 데이터에 대해 보안 제공
자료에 대한 접근성 및 응답성 향상 - SQL 등을 사용하여 데이터에 접근할 수 있고 또한 모든 데이터들을 검색할 수 있는 키로 활용하는 등 자료에 대한 접근성이 탁월

데이터베이스 관리 시스템의 단점
비용이 많이 필요 - 대용량 메모리와 고속 CPU 요구 등의 초기 운영비, 유지보수비, 다양한 요구를 충족시키기 위한 개발비
Backup & Recovery 기법이 어려워짐 - 데이터 구조가 복잡하며 여러 사용자가 동시에 공유함으로써 장애 발생시 정확한 이유나 상태 파악이 힘듦
시스템의 취약성 - 통합 시스템이므로 일부의 고장이 시스템 전체를 마비시켜, 신뢰성과 가용성을 저해할 수 있음
