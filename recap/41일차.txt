JavaScript 객체

배열 내부에 있는 값을 요소(element)
객체 내부에 있는 값은 속성(property) 
자바 스크립트에서는 요소와 속성을 구분하지 않고 쓰며 객체 속성 중 함수형 자료형인 속성을 메소드라 부름
배열은 일반 for문과 for~in문으로 요소에 쉽게 접근하며 객체는 일반 for문이 불가하기에 for~in문을 사용함
메소드 내에서 this 키워드는 생략이 불가능함

생성자 함수 - 생성자는 객체지향 프로그램에서 객체를 생성할 때 호출되는 단위 메소드를 말함
function 생성자함수명(속성명들) {
            ...
       }
       var 객체명 = new 생성자함수명(속성값들); 
new 키워드로 객체를 생성하므로 생성자 함수이며 생성자 함수로 만든 객체를 객체 또는 인스턴스라 부름
해당 객체가 어떠한 생성자 함수로 생성됐는지 확인할 때 instanceof 키워드를 사용할 수 있음

일반함수를 사용하여 객체를 만든 것과 생성자함수를 사용하여 객체를 만드는 것의 차이없기에
prototype 객체에 생성자 함수로 생성된 객체가 공통으로 가지는 것을 넣어두면 메모리 절약을 할 수 있음

기본내장객체
Number : 숫자 객체
String : 문자열을 다루기 위한 객체
Array : 배열을 만들어 주는 객체
Date : 날짜와 시간을 처리하기 위한 객체
Math : 수학 계산을 위한 객체

기본 자료형과 객체는 자료형이 분명 다르지만 두가지 모두 값을 출력하며 각자의 속성과 메소드가 존재함
속성과 메소드는 객체만이 가질 수 있지만 기본 자료형에서도 속성과 메소드가 있음
기본 자료형의 속성이나 메소드를 사용하면 기본 자료형이 객체로 변환됨
Number 객체의 prototype에 메소드를 추가 시 기본 자료형도 추가한 메소드를 사용할 수 있음
Object 객체는 모든 자바 스크립트 객체의 최상위 객체이므로 Object 객체의 prototype에 속성 또는 메소드를 추가하면 모든 객체에서 활용할 수 있음

Number내장객체함수
toExponential() : 지수형으로 변환 
toFixed() : 매개변수 자리만큼 반올림

string내장객체함수
replaceAll(str, oldStr, newStr) : str에서 oldStr을 newStr로 변경
length : 글자 길이
concat : 글자 연결
substr(3, 5) : 3번째부터 글자 5개 추출
substring(3, 5) : 3번째부터 5번째 앞까지 추출
indexOf() : 맨처음 매개변수가 오는 위치, 없으면 -1을 출력함
lastIndexOf() : 맨뒤에서부터 매개변수가 오는 위치
trim(): 양쪽 space 제거
toUpperCase() : 대문자로 변경
toLowerCase() : 소문자로 변경

정규표현식
            \d (숫자와 매치, [0~9]와 동일)
            \D (숫자가 아닌 문자)
            \w (영문자나 숫자,[a-zA-Z0-9]와 동일)
            \W (영문자나 숫자가 아닌 문자)
            \s (스페이스, 탭, 엔터)
            . (\n을 제외한 문자)
            \. (.)
            \\ (\)
            \[ ([)
            \] (])
            {2,} 	(2번 이상 반복)
            {2,4} (2~4회 반복)
            + 	(1번 이상 반복)
            *   (0번 이상 반복)
            ?    (0번이나 1번 반복)