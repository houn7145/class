Class
객체의 얕은 복사 vs 깊은 복사
let memberArray = ['egoing', 'graphittie', 'leezhce'];
var copyArray = [...memberArray]; // 객체의 깊은 복사
var copyArray = Array.from(memberArray); // 배열의 깊은 복사

단순 객체 생성
let kim = {
    name : 'Kim GilDong',
    first : 10,
    second : 20,
    third : 30,
    sum : function(){
        return this.first + this.second+this.third
    },
};

생성자 함수를 이용한 객체 생성
function Person(name, first, second, third){
    this.name = name;
    this.first = first;
    this.second = second;
    this.third = third;
}
Person.prototype.sum = function(){
    return this.first + this.second + this.third;
};

class를 이용한 객체 생성
// class는 ECMA scipt 6 이상을 지원하는 브라우저에서 가능
class Person {
    constructor(name, first, second){
        console.log('생성자 호출됨');
        this.name = name;
        this.first = first;
        this.second = second;
    }
    sum(){
        return this.first + this.second;
    }
}

class를 이용한 상속
class PersonPlus extends Person{
    constructor(name, first, second, third){
        super(name, first, second); // 부모클래스의 생성자함수
        this.third = third;
    }
    sum(){
        return this.first+this.second+this.third;
    }
    avg(){
        return this.sum()/3;
    }
}

객체의 상속(__proto__ 이용) // 객체끼리도 상속관계를 맺을 수 있음
var superObj = {superVal : 'super'};
var subObj = {subVal : 'sub'};
subObj.__proto__ = superObj; // 표준으로 인정받지는 못하나 브라우저에서는 제공

call과 bind
call은 함수를 호출하는 함수이며 그냥 실행하는 것이 아니라 첫번째 인자에 this로 setting하고자 하는 객체를 넘겨주어 this로 바꾸고 나서 실행함
bind는 새롭게 바인딩할 함수를 만드는 것이며 바인딩한 함수는 원본 함수 객체를 감싸는 함수임
call과 마찬가지로 this를 바꾸지만 호출하지는 않으며 변수를 할당하여 호출하는 형태로 사용

React
사용자 정의 태그를 만들어 주는 기술 중 하나이고 이를 component라 함
Component의 장점 : 1.가독성 2.재사용성 3.유지보수 용이성

개발환경 구축
https://reactjs.org/ 접속 -> Get Started -> Create a New React App의 learn how 클릭 후 Toolchains 사용 (https://github.com/facebook/create-react-app)

npm install –g create-react-app 명령어를 cmd창 관리자권한으로 실행한 뒤 입력 
이후 create-react-app 가능(npm install tar@6 –g로 tar version을 업그레이드)
Create-react-app –V 로 버전 확인
npm(node pakage manager)과 npx의 차이 : npm은 한번 설치, npx는 임시로 설치해서 사용하고 지우기에 실행할 때마다 새버전을 다운함

사용하고자 하는 폴더에서 cmd 창에서 create-react-app . 입력
폴더를 vs code에서 실행 후 npm run start 또는 npm start 입력
public의 index.html이 브라우저에서 열리고
src의 index.js가 실행 -> app.js 로 가는 소스를 수정하면 됨

배포(deploy)
F12의 Network 탭을 열고 캐시비우기 및 강력 새로고침하면 용량이 크기에 줄여서 배포해야함
npm run build 입력하면 build 폴더 생성됨
npm install –g serve